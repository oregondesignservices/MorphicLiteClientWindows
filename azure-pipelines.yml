# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

# name controls the Build.BuildNumber variable
# We'll use the BuildNumber as the final two components of our app's version number
#
# App version number componnents can only be 5 digits or the build fails
# So we'll design a number using a 2 digit year and 3 digit day of year
# 
# NOTE: The documentation isn't clear if DayOfYear is always three digits, so
# we'll need to watch this.
#
# NOTE: A two-digit year is less than ideal, but we find ourselves in year 20
# and it's unlikely this will be around in 80 more years
name: $(Year:yy)$(DayOfYear).$(Rev:r)

trigger:
  branches:
    include:
      - master
      - "release/*"
      - "staging/*"

pool:
  vmImage: 'windows-latest'

variables:
# must be created in the azure UI under Pipelines > Library and specify accessKey, secretKey, region, and bucket
- group: 's3-public-bucket-upload'
# Holds all signing-related variables. Provide them the same was as the var group above.
- group: 'windows-code-sign'
- name: solution
  value: '**/*.sln'
- name: projects
  value: '**/*proj'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: versionBuildComponents
  value: '.$(Build.BuildNumber)'

stages:
  - stage: build
    jobs:
      - job: build
        steps:

        # Set a $(BUILD_TYPE) variable
        - bash: |
            BUILD_TYPE="Development"
            if [[ "${BRANCH}" == *"staging/"* ]]; then
              BUILD_TYPE="Staging"
            elif [[ "${BRANCH}" == *"release/"* ]]; then
              BUILD_TYPE="Production"
            fi
            echo "##vso[task.setvariable variable=BUILD_TYPE]${BUILD_TYPE}"
          env:
            BRANCH: $(Build.SourceBranch)
            BRANCH_NAME: $(Build.SourceBranchName)
        
        - task: NuGetToolInstaller@1
        
        - task: NuGetCommand@2
          displayName: "restore solutions"
          inputs:
            restoreSolution: '$(solution)'
        
        - task: NuGetCommand@2
          displayName: "restore projects"
          inputs:
            restoreSolution: '$(projects)'
        
        - task: Bash@3
          displayName: "write build info"
          env:
            BRANCH: $(Build.SourceBranch)
            BRANCH_NAME: $(Build.SourceBranchName)
            COMMIT: $(Build.SourceVersion)
            BUILD_NUM: $(Build.BuildNumber)
          inputs:
            targetType: 'filePath'
            filePath: set-build-info.sh
        
        - task: VSBuild@1
          displayName: "build solutions"
          env:
            VERSIONBUILDCOMPONENTS: '$(versionBuildComponents)'
          inputs:
            solution: '$(solution)'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
            msbuildArgs: '/p:BuildType=$(BUILD_TYPE)'
        
        - task: VSTest@2
          displayName: "execute tests"
          inputs:
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
        
        - task: VSBuild@1
          displayName: "build x64 installer"
          env:
            VERSIONBUILDCOMPONENTS: '$(versionBuildComponents)'
          inputs:
            solution: 'Morphic.Setup\Morphic.Setup.wixproj'
            platform: 'x64'
            configuration: '$(buildConfiguration)'
            msbuildArgs: '/p:BuildType=$(BUILD_TYPE)'

        - task: VSBuild@1
          displayName: "build x64 community installer"
          env:
            VERSIONBUILDCOMPONENTS: '$(versionBuildComponents)'
          inputs:
            solution: 'Morphic.BarSetup\Morphic.BarSetup.wixproj'
            platform: 'x64'
            configuration: '$(buildConfiguration)'
            msbuildArgs: '/p:BuildType=$(BUILD_TYPE)'

        - task: DotNetCoreCLI@2
          displayName: Install AzureSignTool
          inputs:
            command: 'custom'
            custom: 'tool'
            arguments: 'install --global azuresigntool'
            
        - task: CmdLine@2
          displayName: 'sign x64 installer'
          inputs:
            targetType: 'inline'
            script: >
              AzureSignTool sign
              -d Morphic
              -du "$(SigningURL)" 
              -kvu "$(SigningVaultURL)" 
              -kvi "$(SigningClientId)" 
              -kvs "$(SigningClientSecret)" 
              -kvc "$(SigningCertName)"
              -tr "$(TimestampUrl)"
              -v $(System.DefaultWorkingDirectory)\Morphic.Setup\bin\Release\x64\MorphicSetup.msi
        
        - publish: $(System.DefaultWorkingDirectory)\Morphic.Setup\bin\Release\x64\MorphicSetup.msi
          displayName: "save x64 installer for later"
          artifact: x64-installer

        - task: CmdLine@2
          displayName: 'sign x64 community installer'
          inputs:
            targetType: 'inline'
            script: >
              AzureSignTool sign
              -d Morphic
              -du "$(SigningURL)"
              -kvu "$(SigningVaultURL)"
              -kvi "$(SigningClientId)"
              -kvs "$(SigningClientSecret)"
              -kvc "$(SigningCertName)"
              -tr "$(TimestampUrl)"
              -v $(System.DefaultWorkingDirectory)\Morphic.BarSetup\bin\Release\x64\MorphicCommunitySetup.msi

        - publish: $(System.DefaultWorkingDirectory)\Morphic.BarSetup\bin\Release\x64\MorphicCommunitySetup.msi
          displayName: "save x64 community installer for later"
          artifact: x64-community-installer

        - publish: $(System.DefaultWorkingDirectory)\Morphic.Client\BuildVersion.txt
          displayName: "save build version numbers"
          artifact: build-version
            
  - stage: upload
    jobs:
      - job: publish_installer
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          # do not checkout code. we only need to upload the published artifact
          - checkout: none
          - download: current
            artifact: x64-installer
          - download: current
            artifact: x64-community-installer
          - download: current
            artifact: build-version
          - task: Bash@3
            displayName: "upload MSI to s3"
            env:
              AWS_ACCESS_KEY_ID: $(accessKey)
              AWS_SECRET_ACCESS_KEY: $(secretKey)
              BUCKET: $(bucket)
              AWS_DEFAULT_REGION: $(region)
              BRANCH: $(Build.SourceBranch)
              BRANCH_NAME: $(Build.SourceBranchName)
            inputs:
              targetType: 'inline'
              script: |
                set -e
                set -x

                EXTRA_ARGS=""
                S3_OBJECT_PREFIX=""

                if [[ "${BRANCH_NAME}" == "master" ]]; then
                  echo "detected master build"
                  S3_OBJECT_PREFIX="win/x64/edge"
                  EXTRA_ARGS="--expires $(date -d '+21 days' --iso-8601=seconds)"
                elif [[ "${BRANCH}" == *"staging/"* ]]; then
                  echo "detected staging build"
                  S3_OBJECT_PREFIX="win/x64/staging"
                  EXTRA_ARGS="--expires $(date -d '+14 days' --iso-8601=seconds)"
                elif [[ "${BRANCH}" == *"release/"* ]]; then
                  echo "detected release build"
                  S3_OBJECT_PREFIX="win/x64/stable"
                else
                  echo "detected PR build"
                  S3_OBJECT_PREFIX="win/x64/internal"
                  EXTRA_ARGS="--expires $(date -d '+2 days' --iso-8601=seconds)"
                fi
                
                S3_PUBLISHED_HTTP_URL="https://d23vryjv7k8eyb.cloudfront.net"
                INSTALLER_NAME_BASE="MorphicSetup"
                VERSION=$(sed -n 1p ${AGENT_BUILDDIRECTORY}/build-version/BuildVersion.txt | tr -d [:space:])
                ASSEMBLY_VERSION=$(sed -n 2p ${AGENT_BUILDDIRECTORY}/build-version/BuildVersion.txt | tr -d [:space:])
                LOCAL_MSI_SOURCE="${AGENT_BUILDDIRECTORY}/x64-installer/MorphicSetup.msi"
                LOCAL_APPCAST_SOURCE="${AGENT_BUILDDIRECTORY}/${INSTALLER_NAME_BASE}-v${VERSION}.appcast.xml"
                S3_MSI_OBJECT_NAME="${S3_OBJECT_PREFIX}/${INSTALLER_NAME_BASE}-v${VERSION}.msi"
                S3_APPCAST_OBJECT_NAME="${S3_OBJECT_PREFIX}/${INSTALLER_NAME_BASE}-v${VERSION}.appcast.xml"

                LOCAL_COMMUNITY_MSI="${AGENT_BUILDDIRECTORY}/x64-community-installer/MorphicCommunitySetup.msi"
                COMMUNITY_S3_TARGET="${S3_OBJECT_PREFIX}/MorphicCommunitySetup-v${VERSION}.msi"
                
                cat > "${LOCAL_APPCAST_SOURCE}" <<EOF
                <?xml version="1.0" encoding="utf-8"?>
                <item>
                  <version>${ASSEMBLY_VERSION}</version>
                  <url>${S3_PUBLISHED_HTTP_URL}/${S3_MSI_OBJECT_NAME}</url>
                </item>
                EOF

                echo ${S3_PUBLISHED_HTTP_URL}/${S3_APPCAST_OBJECT_NAME}
                cat "${LOCAL_APPCAST_SOURCE}"

                ls -al ${AGENT_BUILDDIRECTORY}
                aws s3 cp $EXTRA_ARGS "${LOCAL_MSI_SOURCE}" "s3://${BUCKET}/${S3_MSI_OBJECT_NAME}"
                aws s3 cp $EXTRA_ARGS "${LOCAL_APPCAST_SOURCE}" "s3://${BUCKET}/${S3_APPCAST_OBJECT_NAME}"
                aws s3 cp $EXTRA_ARGS "${LOCAL_COMMUNITY_MSI}" "s3://${BUCKET}/${COMMUNITY_S3_TARGET}"